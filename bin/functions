# This is the main functions file for the Batch-Mail/FTP system

#. /home/ovrs/conf/main.conf

add_cust () {
        # Use add_cust ID NAME OPTS
        [[ -z $1 ]] && echo "Usage: add_cust ID [NAME] [OPTS]" && return 254
        local ID=`echo $1 | sed -e 's/:/_/g'`
        local NAME=`echo $2 | sed -e 's/:/_/g'`
        local OPTS=`echo $3 | sed -e 's/:/_/g'`
        [[ `egrep "^$ID" $CUSTOMERS` ]] && {
                echo "Customer Exists, can not add"
                egrep -Hb "^$ID" $CUSTOMERS
                return 2
        } || {
                echo $ID:$NAME:$OPTS >> $CUSTOMERS
        }
        local TMP=/tmp/bchmail.tmp.$RANDOM
        cat $CUSTOMERS > $TMP || {
                echo Error! could not create temporary file
                return 1
        }
        [[ -e  $TMP ]] && sort -t':' -k1 $TMP> $CUSTOMERS || {
                echo Error! could not recreate customers file
                return 2
        } && rm -f $TMP && return 0
}

ch_cust () {
        # Use ch_cust ID -n "NAME"
        # Use ch_cust ID -o "OPTS"
        [[ -z $1 ]] && echo "Usage: ch_cust ID [-o OPTS | -n NAME]" && return 254
        cp -rf $CUSTOMERS $CUSTOMERS.$(date +%m%d%H%M)
        local ID=$1
        get_cust $ID || return 2
        local NAME=`get_cust $ID NAME`
        local OPTS=`get_cust $ID OPTS`
        [[ $2 == "-n" ]] && local NAME=$3
        [[ $2 == "-o" ]] && local OPTS=$3
        local TMP=/tmp/bchmail.tmp.$RANDOM
        egrep -v "^$ID:" $CUSTOMERS > $TMP || {
                echo Error! could not create temporary file
                return 1
        }
        echo $ID:$NAME:$OPTS >> $TMP
        sort -t':' -k1 $TMP > $CUSTOMERS && rm -f $TMP || echo "Could not replace $CUSTOMERS file"
}

get_cust () {
        # Use get_cust CUSTOMER_ID NAME|OPTS
        local ID=$1
        [[ `egrep "^$ID:" $CUSTOMERS` ]] || {
                echo "Customer $1 not found!" 1>&2
                return 2
        } && {
                local CUST=`egrep "^$ID:" $CUSTOMERS`
                # make customer info fields
                eval `echo $CUST | awk -F":" '{print "local CUST_NAME=\""$2,"\"\nlocal CUST_OPTS=\""$3"\""}'`
                #echo ID:$CUST_ID
                [[ `echo $2 | grep -i "name"` ]] && echo $CUST_NAME
                [[ `echo $2 | grep -i "opts"` ]] && echo $CUST_OPTS
                return 0
        }
}

del_cust () {
        local ID=$1
        local TMP=/tmp/bchmail.tmp.$RANDOM
        egrep -v "^$ID:" $CUSTOMERS > $TMP || {
                echo Error! could not create temporary file
                return 1
        }
        [[ -e  $TMP ]] && sort -t':' -k1 $TMP> $CUSTOMERS || {
                echo Error! could not recreate customers file
                return 2
        }
        return 0
}

complete_file () {
        #echo "Debug: in complete_file()"
        echo "$(date +%D\ %H:%M:%S) $FUNCNAME processing $*"
        local FILE
        local RETURN=0
        for FILE in $*
        do
                FN=$(echo $FILE | sed -e 's/.*\///g')
                ls $FILE >/dev/null 2>&1 || {
                        echo "$(date +%D\ %H:%M:%S) $FUNCNAME File: $FILE was not found"
                        return 3
                }
                cp $FILE $COMPLETE/ || {
                        echo "$(date +%D\ %H:%M:%S) $FUNCNAME Could not create file in $COMPLETE/"
                        RETURN=2
                }
                diff $FILE $COMPLETE/$FN || {
                        echo "$(date +%D\ %H:%M:%S) $FUNCNAME File $FILE and file $COMLETE/$FN differ !"
                        RETURN=2
                }
                rm -f $FILE
        done
        [[ $RETURN == 0 ]] && {
                return 0
        }||{
                return 2
        }
}

failed_file () {
        #echo "Debug: in complete_file()"
        echo "$(date +%D\ %H:%M:%S) $FUNCNAME processing $*"
        local FILE
        local RETURN=0
        for FILE in $*
        do
                FN=$(echo $FILE | sed -e 's/.*\///g')
                echo $FN | egrep '.xls$' || {
                        cp $FILE $FAILED/ || {
                                echo "$(date +%D\ %H:%M:%S) $FUNCNAME Could not create file in $FAILED/"
                                RETURN=2
                        }
                        diff $FILE $FAILED/$FN || {
                                echo "$(date +%D\ %H:%M:%S) $FUNCNAME File $FILE and file $FAILED/$FN differ !"
                                RETURN=2
                        }
                        rm -f $FILE
                }
        done
        [[ $RETURN == 0 ]] && {
                return 0
        }||{
                return 2
        }
}

process_file () {
        [[ -e $1 ]] || return 2
        head -n1 $1 | grep \@ >/dev/null && {
                local TYPE=mail
        } || {
                local TYPE=ftp
        }
        # substr ; remove anything before the last "/"
        local FN=${1##*/}
        # substr ; remove anything after the first "_"
        local CUST=${FN%_*}
        echo "$(date +%D\ %H:%M:%S) $FUNCNAME File $FN | Type $TYPE"
        #-#get_cust $CUST
        [[ $TYPE == "mail" ]] && {
                send_mail $1 $CUST $FN
                [[ $? == 0 ]] && {
                        complete_file $1
                } || {
                        failed_file $1
                }
        }

        [[ $TYPE == "ftp" ]] && {
                #run_ftp $1 $CUST $FN
                #[[ $? == 0 ]] && {
                #       complete_file $1
                #} || {
                #       failed_file $1
                #}
                FTP_FLAG="TRUE"
        }

        return 0
}

run_ftp () {
        local CUST=$2
        local FN=$3
        local FPFN=$1
        CUST_LIST=$(egrep -v '^#' $CUSTOMERS | grep ftp | awk -F":" '{print $1}')
        for CUST in $CUST_LIST
        do
                echo "$(date +%D\ %H:%M:%S) $FUNCNAME Running FTP transactions for customer: $CUST"
                $HOME/bin/ftp.run.customer $CUST
        done
        FTP_FLAG="FALSE"
        return 0
}

send_mail () {
        printf "$(date +%D\ %H:%M:%S) $FUNCNAME Sending mail with file $1"
        local CUST=$2
        local FN=$3
        local UVRCPT=`head -n1 $1 | egrep '@' | sed -e 's/;/,/g'`
        local MAILFILE=$TEMP/${FN}_$RANDOM
        local SUBJ=`grep -i '~s' $1 | tail -n1 | sed -ne 's/~s //g p'`
        local ATTACHNAME="ovsinv"
        #local ATTACHNAME=`awk '/~s/{print $2}' $1`
        # Create E-Mail format (sendmail) in $MAILFILE
        local EXT=$RANDOM
        local TEMPFILE=${1}.$EXT
        local BOUNDARY=$EXT
        local MATTACH="N"
        local RCPT
        # Going to Verify UVRCPT into RCPT
        for R in $(echo $UVRCPT | sed -e 's/,/ /g')
        do
                echo $R | egrep '\.\.' && {
                        printf " $R IS NOT VALID !!! (..) "
                } || {
                        echo $R | egrep '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$' >/dev/null && {
                                RCPT="$R , $RCPT "
                        } || {
                                printf " $R IS NOT VALID!!! "
                        }
                }
        done
        RCPT=$(echo $RCPT | sed -e 's/,\ *$//')
        printf " | Subject: $SUBJ | UVRcpt: $UVRCPT | Rcpt: $RCPT"
        [[ `get_cust $CUST opts | grep -i mattach` ]] && {
                MATTACH="Y"
        }
        [[ `sed -ne 's/~a //g p' $1` ]] && {
                ATTACHNAME=`sed -ne 's/~a //g p' $1`
                printf " | Attach: $ATTACHNAME"
        }
        unset ATTACHHOST ATTACHUSER ATTACHPASS ATTACHADDR ATTACHPATH ATTACHSHAR ATTACHDIR
        [[ `sed -ne 's/~h //g p' $1` ]] && {
                ATTACHHOST=`sed -ne 's/~h //g p' $1`
                ATTACHUSER=$(echo $ATTACHHOST | sed 's/;.*//')
                ATTACHPASS=$(echo $ATTACHHOST | sed 's/.*;// ; s/\@.*//')
                ATTACHADDR=$(echo $ATTACHHOST | sed 's/.*@//')
                printf " | AttachHost: $ATTACHHOST [USER: $ATTACHUSER ; PASS: $ATTACHPASS ; ADDR: $ATTACHADDR]"
        }
        [[ `sed -ne 's/~d //g p' $1` ]] && {
                ATTACHPATH=`sed -ne 's/~d //g p' $1`
                ATTACHSHAR=$(echo $ATTACHPATH | awk -F'/' '{print $2}')
                ATTACHDIR=$(echo $ATTACHPATH | sed 's!/[a-zA-Z].*/!!')
                printf " | AttachPath: $ATTACHPATH [SHARE: $ATTACHSHAR ; DIR: $ATTACHDIR]"
                cd /tmp
                smbclient //$ATTACHADDR/$ATTACHSHAR $ATTACHPASS -U $ATTACHUSER -D $ATTACHDIR -c "get $ATTACHNAME"
                cd -
        }
        [[ `get_cust $CUST opts | grep -i msubject` ]] && {
                egrep -v '~c|~p|~a|~d|~h' $1 | awk '{if ( NR != 1) print}' > $TEMPFILE
        } || {
                egrep -v '~c|~p|~a|~s|~d|~h' $1 | awk '{if ( NR != 1) print}' > $TEMPFILE
        }
        [[ `grep '~c' $1` ]] && {
                MATTACH="Y"
                iconv -f hebrew -t utf-8 -c -s $TEMPFILE > $TEMPFILE.iconv
                $HOME/bin/csv2xls.pl -i $TEMPFILE.iconv -o $TEMPFILE.xls || {
                        echo "$(date +%D\ %H:%M:%S) $FUNCNAME ERROR: Could not convert CSV to XLS"
                } && {
                        ORIGFILE=$TEMPFILE
                        TEMPFILE=$TEMPFILE.xls
                }
                rm $ORIGFILE.iconv
                [[ `echo $ATTACHNAME | egrep '\.[a-zA-Z0-9]{3,4}$'` ]] || ATTACHNAME=$ATTACHNAME.xls
        }
        [[ -e $ATTACHNAME ]] || [[ -e "/tmp/$ATTACHNAME" ]] && ATTACHNAME="/tmp/$ATTACHNAME"
        [[ $MATTACH == "Y" ]] && {
                [[ -z $ATTACHPATH ]] && {
                echo "PPP No ATTACHPATH. Old mail format TEMPFILE=$TEMPFILE | ATTACHNAME=$ATTACHNAME"
cat <<END > $MAILFILE
To: $RCPT
Subject: $SUBJ
From: $MAILFROM
Mime-version: 1.0
Content-type: application/octet-stream
Content-Disposition: attachment; filename=$ATTACHNAME;
Content-transfer-encoding: base64

$($ENC -m $TEMPFILE $ATTACHNAME | tail -n+2)
END
                } || {
                echo "PPP Yes ATTACHPATH. New mail format ATTACHNAME=$ATTACHNAME"
cat <<END > $MAILFILE
To: $RCPT
Subject: $SUBJ
From: $MAILFROM
Mime-version: 1.0
Content-type: application/octet-stream
Content-Disposition: attachment; filename=$(basename $ATTACHNAME);
Content-transfer-encoding: base64

$($ENC -m $ATTACHNAME $(basename $ATTACHNAME) | tail -n+2)
END
                }
        } || {
        echo "PPP No MATTACH. Non Relevant"
cat <<END > $MAILFILE
To: $RCPT
Subject: $SUBJ
From: $MAILFROM
Mime-version: 1.0
Content-Type: text/plain; charset="iso-8859-8"

$(< $TEMPFILE)
END
        }
        cat $MAILFILE | $SENDMAIL -t && {
                #rm -f $MAILFILE $ORIGFILE $TEMPFILE
                rm -f $ORIGFILE $TEMPFILE
                echo
                return 0
        } || {
                echo "$(date +%D\ %H:%M:%S) $FUNCNAME Could not send mail. File $MAILFILE"
                echo
                return 2
        }
}

scan_dir () {
        [[ -d $1 ]] && {
                find $1 -type f
                #-#find $1 -type f -mmin +1
                return 0
        } || {
                echo " $(date +%D\ %H:%M:%S) $FUNCNAME Could not open dir $1 !"
                return 2
        }
        return 0
}


check_mail(){
        /usr/bin/fetchmail >> $HOME/log/fetchmail.log 2>&1 || true
        echo "q" | mail >/dev/null 2>&1 && {
                return 0
        }||{
                return 1
        }
}

get_mail() {
       while `. $HOME/bin/functions ; check_mail`
        do
                EXT=$RANDOM
#                echo "print 1" | mail  > $TEMP/inmail.$EXT
                echo "s 1 $TEMP/inmail.$EXT" | mail
        done
}
webconv_opts() {
        sed -e 's/\+/ /g ; s/\%2C/,/g ; s/&/\n/g ; s/\%24/$/g ; s/\%2F/\//g' | sed -e 's/=/=\"/ ; s/$/\"/'
}
webconv() {
        sed -e 's/\%2C/,/g ; s/\%24/$/g ; s/\%2F/\//g ; s/\%5C/\\/g'
}


